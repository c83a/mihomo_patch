diff --git a/adapter/outboundgroup/loadbalance.go b/adapter/outboundgroup/loadbalance.go
index c3222b3..4424b44 100644
--- a/adapter/outboundgroup/loadbalance.go
+++ b/adapter/outboundgroup/loadbalance.go
@@ -246,6 +246,12 @@ func NewLoadBalance(option *GroupCommonOption, providers []provider.ProxyProvide
 	switch strategy {
 	case "consistent-hashing":
 		strategyFn = strategyConsistentHashing(option.URL)
+	case "round-robin0":
+		if option.TestTimeout > 1024 {
+			strategyFn = strategyRoundRobin0(option.TestTimeout, option.URL)
+		} else {
+			strategyFn = strategyRoundRobin0(0x1000, option.URL)
+		}
 	case "round-robin":
 		strategyFn = strategyRoundRobin(option.URL)
 	case "sticky-sessions":
@@ -276,3 +282,34 @@ func NewLoadBalance(option *GroupCommonOption, providers []provider.ProxyProvide
 		Icon:           option.Icon,
 	}, nil
 }
+
+func strategyRoundRobin0(tick int, url string) strategyFn {
+	var aliveproxies []C.Proxy = make([]C.Proxy)
+	lastlen := 0
+	var idx uint = 0
+	idxMutex := sync.Mutex{}
+	return func(proxies []C.Proxy, metadata *C.Metadata, touch bool) (proxy C.Proxy) {
+		length := len(proxies)
+		idxMutex.Lock()
+		defer idxMutex.Unlock()
+		if length == lastlen && idx%tick != 0 {
+			proxy = proxies[idx%length]
+			idx++
+			return proxy
+		}
+		lastlen = length
+		aliveproxies = aliveproxies[:0]
+		for _, proxy := range proxies {
+			if proxy.AliveForTestUrl(url) {
+				aliveproxies = append(aliveproxies, proxy)
+			}
+		}
+		if len(aliveproxies) == 0 {
+			aliveproxies = proxies
+		}
+		proxy = proxies[idx%length]
+		idx++
+		return proxy
+	}
+
+}
